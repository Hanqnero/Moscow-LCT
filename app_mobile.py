"""
Mobile-Optimized Streamlit App with PWA Support
Can be installed as an app on Android/iOS
"""

import streamlit as st
from pathlib import Path
import sys

# Add parent directory to path
script_dir = Path(__file__).parent.resolve()
sys.path.insert(0, str(script_dir))

from two_stage_detection import TwoStageDetector
import cv2
import numpy as np
from PIL import Image
import io

# PWA Configuration
st.set_page_config(
    page_title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤",
    page_icon="üå≤",
    layout="wide",
    initial_sidebar_state="collapsed",  # Better for mobile
    menu_items={
        "Get Help": None,
        "Report a bug": None,
        "About": "–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤",
    },
)


# Add PWA manifest and service worker support
def add_pwa_support():
    """Add PWA meta tags and manifest"""
    pwa_html = """
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
        <meta name="apple-mobile-web-app-title" content="–î–µ—Ç–µ–∫—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤">
        <meta name="theme-color" content="#2E7D32">
        <link rel="manifest" href="/manifest.json">
        <link rel="apple-touch-icon" href="/static/icon-192.png">
    </head>
    """
    st.markdown(pwa_html, unsafe_allow_html=True)


# Mobile-optimized CSS
def add_mobile_styles():
    """Add mobile-friendly CSS"""
    mobile_css = """
    <style>
        /* Mobile optimizations */
        @media (max-width: 768px) {
            .stButton button {
                width: 100%;
                padding: 1rem;
                font-size: 1.1rem;
            }
            
            .stSlider {
                padding: 0.5rem 0;
            }
            
            img {
                max-width: 100%;
                height: auto;
            }
            
            /* Hide Streamlit branding on mobile */
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
        }
        
        /* Full-width upload area */
        .uploadedFile {
            width: 100%;
        }
        
        /* Better touch targets */
        button, a, input {
            min-height: 44px;
            min-width: 44px;
        }
        
        /* Compact layout */
        .block-container {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }
    </style>
    """
    st.markdown(mobile_css, unsafe_allow_html=True)


add_pwa_support()
add_mobile_styles()

# App title
st.title("üå≤ –î–µ—Ç–µ–∫—Ü–∏—è –¥–µ—Ä–µ–≤—å–µ–≤")
st.markdown("*–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è*")


# Initialize detector
@st.cache_resource
def load_detector():
    """Load models with caching"""
    script_dir = Path(__file__).parent.resolve()
    tree_model = (
        script_dir / "runs" / "detect" / "tree_detection_cpu" / "weights" / "best.pt"
    )
    defect_model = (
        script_dir
        / "runs"
        / "defects"
        / "tree_defects_detection2"
        / "weights"
        / "best.pt"
    )

    return TwoStageDetector(
        tree_model_path=str(tree_model), defect_model_path=str(defect_model)
    )


try:
    detector = load_detector()
except Exception as e:
    st.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
    st.stop()

# Simple mobile UI
st.markdown("### üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ")

uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
    type=["jpg", "jpeg", "png"],
    help="–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –¥–µ—Ä–µ–≤–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≥–∞–ª–µ—Ä–µ–∏",
    label_visibility="collapsed",
)

# Compact settings in expander
with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
    col1, col2 = st.columns(2)
    with col1:
        tree_conf = st.slider(
            "–î–µ—Ä–µ–≤—å—è", 0.0, 1.0, 0.25, help="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤"
        )
    with col2:
        defect_conf = st.slider(
            "–î–µ—Ñ–µ–∫—Ç—ã", 0.0, 1.0, 0.25, help="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤"
        )

if uploaded_file is not None:
    # Show loading spinner
    with st.spinner("üîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        # Load image
        image = Image.open(uploaded_file)
        img_array = np.array(image)

        # Run detection
        results = detector.detect(
            img_array, tree_conf_threshold=tree_conf, defect_conf_threshold=defect_conf
        )

        # Display results
        annotated_img = results["annotated_image"]

        # Show image (full width on mobile)
        st.image(
            annotated_img, use_container_width=True, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
        )

        # Compact metrics
        st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        col1, col2, col3 = st.columns(3)
        col1.metric("–î–µ—Ä–µ–≤—å—è", results["tree_count"])
        col2.metric("–î–µ—Ñ–µ–∫—Ç—ã", results["defect_count"])
        col3.metric("–í—Å–µ–≥–æ", results["tree_count"] + results["defect_count"])

        # Detection details in expandable section
        if results["detections"]:
            with st.expander(f"üîç –î–µ—Ç–∞–ª–∏ ({len(results['detections'])} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π)"):
                for i, det in enumerate(results["detections"], 1):
                    conf_percent = det["confidence"] * 100
                    st.markdown(
                        f"**{i}.** {det['class_name']} "
                        f"({det['type']}) - {conf_percent:.1f}%"
                    )

        # Download button
        # Convert to bytes for download
        img_pil = Image.fromarray(annotated_img)
        buf = io.BytesIO()
        img_pil.save(buf, format="JPEG", quality=95)
        buf.seek(0)

        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            data=buf,
            file_name=f"detection_{uploaded_file.name}",
            mime="image/jpeg",
            use_container_width=True,
        )

        # Share button hint
        st.info(
            'üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è" –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
        )

else:
    # Instructions when no image
    st.info(
        """
    üëÜ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–µ—Ä–µ–≤–∞
    
    **–°–æ–≤–µ—Ç—ã:**
    - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    - –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è 2-5 –º–µ—Ç—Ä–æ–≤
    - –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
    - –î–µ—Ä–µ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ –∫–∞–¥—Ä–∞
    """
    )

# Installation hint
st.markdown("---")
with st.expander("üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"):
    st.markdown(
        """
    ### –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω:
    
    **Android (Chrome):**
    1. –ù–∞–∂–º–∏—Ç–µ –º–µ–Ω—é (‚ãÆ)
    2. –í—ã–±–µ—Ä–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    3. –ù–∞–∂–º–∏—Ç–µ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    
    **iOS (Safari):**
    1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
    2. –í—ã–±–µ—Ä–∏—Ç–µ "–ù–∞ —ç–∫—Ä–∞–Ω –î–æ–º–æ–π"
    3. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å"
    
    –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ —Å –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞!
    """
    )
