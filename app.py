#!/usr/bin/env python3
"""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ - –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
–î–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: –î–µ—Ä–µ–≤—å—è + –î–µ—Ñ–µ–∫—Ç—ã
"""

import streamlit as st
from PIL import Image
import cv2
import numpy as np
from pathlib import Path
import tempfile
import json
import torch

# Fix for PyTorch 2.6+ weights_only security change
try:
    from ultralytics.nn.tasks import DetectionModel

    torch.serialization.add_safe_globals([DetectionModel])
except Exception:
    pass  # Older PyTorch versions don't have this

from two_stage_detection import TwoStageDetector

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤", page_icon="üå≤", layout="wide"
)


@st.cache_resource
def load_detector(tree_model_path, defect_model_path):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        detector = TwoStageDetector(tree_model_path, defect_model_path)
        return detector, None
    except Exception as e:
        return None, str(e)


def find_models():
    """–ù–∞–π—Ç–∏ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    script_dir = Path(__file__).parent.resolve()
    tree_model = (
        script_dir / "runs" / "detect" / "tree_detection_cpu" / "weights" / "best.pt"
    )
    defect_model = (
        script_dir
        / "runs"
        / "defects"
        / "tree_defects_detection2"
        / "weights"
        / "best.pt"
    )
    defect_model_alt = (
        script_dir
        / "runs"
        / "defects"
        / "tree_defects_detection"
        / "weights"
        / "best.pt"
    )

    # Use alternative if primary doesn't exist
    if not defect_model.exists() and defect_model_alt.exists():
        defect_model = defect_model_alt

    return (
        str(tree_model) if tree_model.exists() else None,
        str(defect_model) if defect_model.exists() else None,
    )


def format_results_html(results):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ HTML –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    html = "<div style='font-family: monospace;'>"

    for tree in results["trees"]:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–µ—Ä–µ–≤–∞
        tree_color = "#2ecc71" if not tree["defects"] else "#e74c3c"
        html += f"<div style='margin-bottom: 20px; padding: 15px; border-left: 4px solid {tree_color}; background-color: #f8f9fa;'>"
        html += (
            f"<h4 style='margin: 0 0 10px 0; color: {tree_color};'>üå≤ {tree['id']}</h4>"
        )
        html += f"<p style='margin: 5px 0;'><b>–¢–∏–ø:</b> {tree['type']}</p>"
        html += f"<p style='margin: 5px 0;'><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {tree['confidence']:.1%}</p>"

        if "type_confidence" in tree:
            html += f"<p style='margin: 5px 0;'><b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–∏–ø–∞:</b> {tree['type_confidence']:.1%}</p>"

        if tree["defects"]:
            html += f"<p style='margin: 10px 0 5px 0;'><b>‚ö†Ô∏è –î–µ—Ñ–µ–∫—Ç—ã ({len(tree['defects'])}):</b></p>"
            html += "<ul style='margin: 0; padding-left: 20px;'>"
            for defect in tree["defects"]:
                html += f"<li>{defect['type']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {defect['confidence']:.1%})</li>"
            html += "</ul>"
        else:
            html += "<p style='margin: 10px 0 0 0; color: #27ae60;'>‚úì –î–µ—Ñ–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>"

        html += "</div>"

    if results["unmatched_defects"]:
        html += "<div style='margin-top: 20px; padding: 15px; border-left: 4px solid #f39c12; background-color: #fef5e7;'>"
        html += f"<h4 style='margin: 0 0 10px 0; color: #f39c12;'>‚ö†Ô∏è –ù–µ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ñ–µ–∫—Ç—ã ({len(results['unmatched_defects'])})</h4>"
        html += "<ul style='margin: 0; padding-left: 20px;'>"
        for defect in results["unmatched_defects"]:
            html += (
                f"<li>{defect['class']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {defect['confidence']:.1%})</li>"
            )
        html += "</ul>"
        html += "</div>"

    html += "</div>"
    return html


def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üå≤ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –¥–µ—Ñ–µ–∫—Ç–æ–≤")
    st.markdown(
        "–î–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ: —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—é—Ç—Å—è –¥–µ—Ä–µ–≤—å—è, –∑–∞—Ç–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—Ç—Å—è –¥–µ—Ñ–µ–∫—Ç—ã –≤ –∫–∞–∂–¥–æ–º –¥–µ—Ä–µ–≤–µ"
    )
    st.markdown("---")

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")

        # –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–µ–π
        st.subheader("–ú–æ–¥–µ–ª–∏")
        tree_model, defect_model = find_models()

        if tree_model and defect_model:
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤—å–µ–≤")
            st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–µ—Ñ–µ–∫—Ç–æ–≤")
            detector, error = load_detector(tree_model, defect_model)
            if error:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {error}")
                detector = None
        else:
            if not tree_model:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –¥–µ—Ä–µ–≤—å–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                st.info("–û–±—É—á–∏—Ç—å: `python train_cpu.py`")
            if not defect_model:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –¥–µ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                st.info("–û–±—É—á–∏—Ç—å: `python train_defects.py`")
            detector = None

        st.markdown("---")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
        tree_conf = st.slider("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤", 0.05, 0.95, 0.25, 0.05)
        defect_conf = st.slider("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ—Ñ–µ–∫—Ç–æ–≤", 0.05, 0.95, 0.20, 0.05)

        st.markdown("---")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        st.subheader("‚ÑπÔ∏è –ö–ª–∞—Å—Å—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")
        with st.expander("–¢–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤ (2)"):
            st.markdown(
                """
            - –ö—É—Å—Ç
            - –î—É–±
            """
            )

        with st.expander("–¢–∏–ø—ã –¥–µ—Ñ–µ–∫—Ç–æ–≤ (12)"):
            st.markdown(
                """
            - –¢—Ä–µ—â–∏–Ω–∞, –ú—ë—Ä—Ç–≤—ã–π –∫—É—Å—Ç, –ú—ë—Ä—Ç–≤–æ–µ –¥–µ—Ä–µ–≤–æ
            - –°—É—Ö–∞—è –∫—Ä–æ–Ω–∞, –ù–∞–∫–ª–æ–Ω—ë–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            - –û—Ç–º–µ—á–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, –¢–æ–≤–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ
            - –û—Ç–º–µ—á–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ (–≤–∞—Ä–∏–∞–Ω—Ç)
            - –ì–Ω–∏–ª—å, –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ —Å—Ç–≤–æ–ª–∞
            - –ì–Ω–∏–ª—å —Å—Ç–≤–æ–ª–∞, –î—É–ø–ª–æ
            """
            )

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if detector is None:
        st.error("‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –æ–±–µ –º–æ–¥–µ–ª–∏.")

        col1, col2 = st.columns(2)
        with col1:
            st.code("python train_cpu.py", language="bash")
            st.caption("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤")
        with col2:
            st.code("python train_defects.py", language="bash")
            st.caption("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ñ–µ–∫—Ç–æ–≤")
        return

    # –ó–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    st.header("üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        type=["jpg", "jpeg", "png"],
        help="–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤ –∏ –∏—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤",
    )

    if uploaded_file is not None:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(uploaded_file)

        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
        with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
            image.save(tmp_file.name)
            tmp_path = tmp_file.name

        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        col1, col2 = st.columns([1, 1])

        with col1:
            st.subheader("üì∑ –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            st.image(image, width=600)

        with col2:
            st.subheader("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

            if st.button(
                "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ", type="primary", use_container_width=True
            ):
                with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–≤—É—Ö—ç—Ç–∞–ø–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ..."):
                    try:
                        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ
                        results = detector.detect(tmp_path, tree_conf, defect_conf)

                        # –°–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                        vis_img = detector.visualize(tmp_path, results)
                        vis_img_rgb = cv2.cvtColor(vis_img, cv2.COLOR_BGR2RGB)

                        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å
                        st.image(vis_img_rgb, width=600)

                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                        st.session_state["results"] = results
                        st.session_state["vis_img"] = vis_img

                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏: {str(e)}")

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if "results" in st.session_state:
            results = st.session_state["results"]

            st.markdown("---")
            st.subheader("üìä –°–≤–æ–¥–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

            # –°–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col_a, col_b, col_c, col_d = st.columns(4)

            with col_a:
                st.metric("–í—Å–µ–≥–æ –¥–µ—Ä–µ–≤—å–µ–≤", results["total_trees"])

            with col_b:
                st.metric("–í—Å–µ–≥–æ –¥–µ—Ñ–µ–∫—Ç–æ–≤", results["total_defects"])

            with col_c:
                healthy_trees = sum(1 for t in results["trees"] if not t["defects"])
                st.metric("–ó–¥–æ—Ä–æ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤", healthy_trees)

            with col_d:
                unhealthy_trees = results["total_trees"] - healthy_trees
                st.metric("–î–µ—Ä–µ–≤—å–µ–≤ —Å –¥–µ—Ñ–µ–∫—Ç–∞–º–∏", unhealthy_trees)

            # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            st.markdown("---")
            st.subheader("üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            html_results = format_results_html(results)
            st.markdown(html_results, unsafe_allow_html=True)

            # –û–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            st.markdown("---")
            st.subheader("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")

            col_dl1, col_dl2 = st.columns(2)

            with col_dl1:
                # –°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if "vis_img" in st.session_state:
                    vis_img = st.session_state["vis_img"]
                    is_success, buffer = cv2.imencode(".jpg", vis_img)
                    if is_success:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ä–∞–∑–º–µ—á–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                            data=buffer.tobytes(),
                            file_name=f"detected_{uploaded_file.name}",
                            mime="image/jpeg",
                            use_container_width=True,
                        )

            with col_dl2:
                # –°–∫–∞—á–∞—Ç—å JSON
                json_str = json.dumps(results, indent=2, ensure_ascii=False)
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã JSON",
                    data=json_str,
                    file_name=f"results_{Path(uploaded_file.name).stem}.json",
                    mime="application/json",
                    use_container_width=True,
                )

        # –û—á–∏—Å—Ç–∫–∞
        try:
            Path(tmp_path).unlink()
        except:
            pass

    else:
        st.info("üëÜ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    main()
